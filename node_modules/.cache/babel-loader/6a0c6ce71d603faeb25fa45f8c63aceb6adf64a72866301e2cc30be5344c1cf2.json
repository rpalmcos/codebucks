{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _interop_require_default = require(\"@swc/helpers/lib/_interop_require_default.js\").default;\nvar _baseFilter = _interop_require_default(require(\"./base-filter\"));\nvar _bitSet = _interop_require_default(require(\"./bit-set\"));\nvar _formulas = require(\"./formulas\");\nclass BloomFilter extends _baseFilter.default {\n  /**\n  * Create an optimal bloom filter providing the maximum of elements stored and the error rate desired\n  * @param  nbItems      - The maximum number of item to store\n  * @param  errorRate  - The error rate desired for a maximum of items inserted\n  * @return A new {@link BloomFilter}\n  */\n  static create(nbItems, errorRate) {\n    const size = (0, _formulas).optimalFilterSize(nbItems, errorRate);\n    const hashes = (0, _formulas).optimalHashes(size, nbItems);\n    return new this(size, hashes);\n  }\n  /**\n  * Build a new Bloom Filter from an existing iterable with a fixed error rate\n  * @param items - The iterable used to populate the filter\n  * @param errorRate - The error rate, i.e. 'false positive' rate, targeted by the filter\n  * @param seed - The random number seed (optional)\n  * @return A new Bloom Filter filled with the iterable's elements\n  * @example\n  * ```js\n  * // create a filter with a false positive rate of 0.1\n  * const filter = BloomFilter.from(['alice', 'bob', 'carl'], 0.1);\n  * ```\n  */\n  static from(items, errorRate, seed) {\n    const array = Array.from(items);\n    const filter = BloomFilter.create(array.length, errorRate);\n    if (typeof seed === 'number') {\n      filter.seed = seed;\n    }\n    array.forEach(element => filter.add(element));\n    return filter;\n  }\n  /**\n  * Get the optimal size of the filter\n  * @return The size of the filter\n  */\n  get size() {\n    return this._size;\n  }\n  /**\n  * Get the number of bits currently set in the filter\n  * @return The filter length\n  */\n  get length() {\n    return this._filter.bitCount();\n  }\n  /**\n  * Add an element to the filter\n  * @param element - The element to add\n  * @example\n  * ```js\n  * const filter = new BloomFilter(15, 0.1);\n  * filter.add('foo');\n  * ```\n  */\n  add(element) {\n    const indexes = this._hashing.getIndexes(element, this._size, this._nbHashes, this.seed);\n    for (let i = 0; i < indexes.length; i++) {\n      this._filter.add(indexes[i]);\n    }\n  }\n  /**\n  * Test an element for membership\n  * @param element - The element to look for in the filter\n  * @return False if the element is definitively not in the filter, True is the element might be in the filter\n  * @example\n  * ```js\n  * const filter = new BloomFilter(15, 0.1);\n  * filter.add('foo');\n  * console.log(filter.has('foo')); // output: true\n  * console.log(filter.has('bar')); // output: false\n  * ```\n  */\n  has(element) {\n    const indexes = this._hashing.getIndexes(element, this._size, this._nbHashes, this.seed);\n    for (let i = 0; i < indexes.length; i++) {\n      if (!this._filter.has(indexes[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n  * Get the current false positive rate (or error rate) of the filter\n  * @return The current false positive rate of the filter\n  * @example\n  * ```js\n  * const filter = new BloomFilter(15, 0.1);\n  * console.log(filter.rate()); // output: something around 0.1\n  * ```\n  */\n  rate() {\n    return Math.pow(1 - Math.exp(-this.length / this._size), this._nbHashes);\n  }\n  /**\n  * Check if another Bloom Filter is equal to this one\n  * @param  other - The filter to compare to this one\n  * @return True if they are equal, false otherwise\n  */\n  equals(other) {\n    if (this._size !== other._size || this._nbHashes !== other._nbHashes) {\n      return false;\n    }\n    return this._filter.equals(other._filter);\n  }\n  export() {\n    return {\n      bitset: this._filter.export(),\n      hashes: this._nbHashes,\n      size: this._size\n    };\n  }\n  import(data) {\n    this._filter = _bitSet.default.import(data.bitset);\n  }\n  /**\n  * Constructor\n  * @param size - The number of cells\n  * @param nbHashes - The number of hash functions used\n  */\n  constructor(size, nbHashes) {\n    super();\n    if (nbHashes < 1) {\n      throw new Error(`A BloomFilter cannot uses less than one hash function, while you tried to use ${nbHashes}.`);\n    }\n    this._size = size;\n    this._nbHashes = nbHashes;\n    this._filter = new _bitSet.default(size);\n  }\n}\nexports.BloomFilter = BloomFilter;","map":{"version":3,"names":["_baseFilter","_interop_require_default","require","_bitSet","_formulas","BloomFilter","default","create","nbItems","errorRate","size","optimalFilterSize","hashes","optimalHashes","from","items","seed","array","Array","filter","length","forEach","element","add","_size","_filter","bitCount","indexes","_hashing","getIndexes","_nbHashes","i","has","rate","Math","pow","exp","equals","other","export","bitset","import","data","constructor","nbHashes","Error"],"sources":["../../../../src/shared/lib/bloom-filter/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}