{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _interop_require_default = require(\"@swc/helpers/lib/_interop_require_default.js\").default;\nvar _hashing = _interop_require_default(require(\"./hashing\"));\nvar _utils = require(\"./utils\");\nfunction randomInt32() {\n  if (typeof window === 'undefined' && process.env.NEXT_RUNTIME === 'nodejs') {\n    return require('crypto').randomBytes(4).readUInt32BE(0);\n  }\n  return crypto.getRandomValues(new Uint32Array(1))[0];\n}\nfunction seedrandom() {\n  return {\n    int32: randomInt32,\n    quick: randomInt32\n  };\n}\nclass BaseFilter {\n  /**\n  * Get the seed used in this structure\n  */\n  get seed() {\n    return this._seed;\n  }\n  /**\n  * Set the seed for this structure\n  * @param  seed the new seed that will be used in this structure\n  */\n  set seed(seed) {\n    this._seed = seed;\n    this._rng = seedrandom();\n  }\n  /**\n  * Get a function used to draw random number\n  * @return A factory function used to draw random integer\n  */\n  get random() {\n    return this._rng;\n  }\n  /**\n  * Return a next random seeded int32 integer\n  * @returns\n  */\n  nextInt32() {\n    return this._rng.int32();\n  }\n  /**\n  * Save the current structure as a JSON\n  */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  saveAsJSON() {\n    throw new Error('not-implemented');\n  }\n  /**\n  * Load an Object from a provided JSON object\n  * @param json the JSON object to load\n  * @return Return the Object loaded from the provided JSON object\n  */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\n  static fromJSON(json) {\n    throw new Error(`not-implemented`);\n  }\n  constructor() {\n    this._seed = (0, _utils).getDefaultSeed();\n    this._rng = seedrandom();\n    this._hashing = new _hashing.default();\n  }\n}\nexports.default = BaseFilter;","map":{"version":3,"names":["_hashing","_interop_require_default","require","_utils","randomInt32","window","process","env","NEXT_RUNTIME","randomBytes","readUInt32BE","crypto","getRandomValues","Uint32Array","seedrandom","int32","quick","BaseFilter","seed","_seed","_rng","random","nextInt32","saveAsJSON","Error","fromJSON","json","constructor","getDefaultSeed","default"],"sources":["../../../../src/shared/lib/bloom-filter/base-filter.ts"],"sourcesContent":[null],"mappings":"AAwBA;;;;;;;AAAoB,IAAAA,QAAW,GAAAC,wBAAA,CAAAC,OAAA,CAAX,WAAW;AACA,IAAAC,MAAS,GAAAD,OAAA,CAAT,SAAS;AAYxC,SAASE,WAAWA,CAAA,EAAG;EACrB,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAIC,OAAO,CAACC,GAAG,CAACC,YAAY,KAAK,QAAQ,EAAE;IAC1E,OAAON,OAAQ,CAAC,QAAQ,CAAC,CACtBO,WAAW,CAAC,CAAC,CAAC,CACdC,YAAY,CAAC,CAAC,CAAC;;EAEpB,OAAOC,MAAM,CAACC,eAAe,CAAC,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAGtD,SAASC,UAAUA,CAAA,EAAG;EACpB,OAAO;IACLC,KAAK,EAAEX,WAAW;IAClBY,KAAK,EAAEZ;GACR;;AAQY,MAAea,UAAU;EAWtC;;;EAGA,IAAWC,IAAIA,CAAA,EAAW;IACxB,OAAO,IAAI,CAACC,KAAK;;EAGnB;;;;EAIA,IAAWD,IAAIA,CAACA,IAAY,EAAE;IAC5B,IAAI,CAACC,KAAK,GAAGD,IAAI;IACjB,IAAI,CAACE,IAAI,GAAGN,UAAU,EAAE;;EAG1B;;;;EAIA,IAAWO,MAAMA,CAAA,EAAS;IACxB,OAAO,IAAI,CAACD,IAAI;;EAGlB;;;;EAIAE,SAAgBA,CAAA,EAAW;IACzB,OAAO,IAAI,CAACF,IAAI,CAACL,KAAK,EAAE;;EAG1B;;IAAA,CAGA;EACAQ,UAAiBA,CAAA,EAAQ;IACvB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;;EAGpC;;;;IAAA,CAKA;EACA,OAAcC,QAAQA,CAACC,IAAU,EAAO;IACtC,MAAM,IAAIF,KAAK,CAAE,iBAAgB,CAAC;;EArDpCG,YAAA,EAAc;IACZ,IAAI,CAACR,KAAK,GAAG,IAAAhB,MAAc,EAAEyB,cAAF,EAAE;IAC7B,IAAI,CAACR,IAAI,GAAGN,UAAU,EAAE;IACxB,IAAI,CAACd,QAAQ,GAAG,IAAIA,QAAO,CAAA6B,OAAA,EAAE;;;kBARHZ,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}