{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _base64Arraybuffer = require(\"./base64-arraybuffer\");\nconst bitsPerWord = 8;\nclass BitSet {\n  /**\n  * Returns the value of the bit at the given index\n  * @param index position of the bit, zero-indexed\n  */\n  has(index) {\n    const wordIndex = Math.floor(index / bitsPerWord);\n    const mask = 1 << index % bitsPerWord;\n    return (this.array[wordIndex] & mask) !== 0;\n  }\n  /**\n  * Set the bit to true\n  * @param index position of the bit, zero-indexed\n  */\n  add(index) {\n    const wordIndex = Math.floor(index / bitsPerWord);\n    const mask = 1 << index % bitsPerWord;\n    this.array[wordIndex] = this.array[wordIndex] | mask;\n  }\n  /**\n  * Returns the maximum true bit.\n  */\n  max() {\n    for (let i = this.array.length - 1; i >= 0; i--) {\n      const bits = this.array[i];\n      if (bits) {\n        return BitSet.highBit(bits) + i * bitsPerWord;\n      }\n    }\n    return 0;\n  }\n  /**\n  * Returns the number of true bits.\n  */\n  bitCount() {\n    let result = 0;\n    for (let i = 0; i < this.array.length; i++) {\n      result += BitSet.countBits(this.array[i]) // Assumes we never have bits set beyond the end\n      ;\n    }\n\n    return result;\n  }\n  /**\n  * Returns true if the size and contents are identical.\n  * @param other another BitSet\n  */\n  equals(other) {\n    if (other.size !== this.size) {\n      return false;\n    }\n    for (let i = 0; i < this.array.length; i++) {\n      if (this.array[i] !== other.array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n  * Returns a JSON-encodable object readable by {@link import}.\n  */\n  export() {\n    return {\n      size: this.size,\n      content: (0, _base64Arraybuffer).encode(this.array)\n    };\n  }\n  /**\n  * Returns an object written by {@link export}.\n  * @param data an object written by {@link export}\n  */\n  static import(data) {\n    if (typeof data.size !== 'number') {\n      throw Error('BitSet missing size');\n    }\n    if (typeof data.content !== 'string') {\n      throw Error('BitSet: missing content');\n    }\n    const result = new BitSet(data.size);\n    const buffer = (0, _base64Arraybuffer).decode(data.content);\n    result.array = new Uint8Array(buffer);\n    return result;\n  }\n  /**\n  * Returns the index of the maximum bit in the number, or -1 for 0\n  * @bits an unsigned 8-bit number\n  * ```js\n  * @example\n  * BitSet.highBit(0) // returns -1\n  * BitSet.highBit(5) // returns 2\n  * ```\n  */\n  static highBit(bits) {\n    let result = bitsPerWord - 1;\n    let mask = 1 << result;\n    while (result >= 0 && (mask & bits) !== mask) {\n      mask >>>= 1;\n      result--;\n    }\n    return result;\n  }\n  /**\n  * Returns the number of true bits in the number\n  * @bits an unsigned 8-bit number\n  * @example\n  * ```js\n  * BitSet.countBits(0) // returns 0\n  * BitSet.countBits(3) // returns 2\n  * ```\n  */\n  static countBits(bits) {\n    let result = bits & 1;\n    while (bits !== 0) {\n      bits = bits >>> 1;\n      result += bits & 1;\n    }\n    return result;\n  }\n  /**\n  * Constructor. All bits are initially set to false.\n  * @param size the number of bits that can be stored. (This is NOT required to be a multiple of 8.)\n  */\n  constructor(size) {\n    const diff = bitsPerWord - size % bitsPerWord;\n    this.size = size + ([0, 8].includes(diff) ? 0 : diff);\n    this.array = new Uint8Array(Math.ceil(this.size / bitsPerWord));\n  }\n}\nexports.default = BitSet;","map":{"version":3,"names":["_base64Arraybuffer","require","bitsPerWord","BitSet","has","index","wordIndex","Math","floor","mask","array","add","max","i","length","bits","highBit","bitCount","result","countBits","equals","other","size","export","content","encode","import","data","Error","buffer","decode","Uint8Array","constructor","diff","includes","ceil"],"sources":["../../../../src/shared/lib/bloom-filter/bit-set.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}