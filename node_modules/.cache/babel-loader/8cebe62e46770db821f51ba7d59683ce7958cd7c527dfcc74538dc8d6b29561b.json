{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _interop_require_default = require(\"@swc/helpers/lib/_interop_require_default.js\").default;\nvar _fnv1A = _interop_require_default(require(\"../fnv1a\"));\nvar _utils = require(\"./utils\");\nclass Hashing {\n  /**\n  * Apply enhanced Double Hashing to produce a n-hash\n  * @see {@link http://peterd.org/pcd-diss.pdf} s6.5.4\n  * @param  n - The indice of the hash function we want to produce\n  * @param  hashA - The result of the first hash function applied to a value.\n  * @param  hashB - The result of the second hash function applied to a value.\n  * @param  size - The size of the datastructures associated to the hash context (ex: the size of a Bloom Filter)\n  * @return The result of hash_n applied to a value.\n  * @memberof Hashing\n  * @author Thomas Minier\n  * @author Arnaud Grall\n  */\n  doubleHashing(n, hashA, hashB, size) {\n    return Math.abs((hashA + n * hashB + Math.floor((n ** 3 - n) / 6)) % size);\n  }\n  /**\n  * Generate a set of distinct indexes on interval [0, size) using the double hashing technique\n  * For generating efficiently distinct indexes we re-hash after detecting a cycle by changing slightly the seed.\n  * It has the effect of generating faster distinct indexes without loosing entirely the utility of the double hashing.\n  * For small number of indexes it will work perfectly. For a number close to the size, and size very large\n  * Advise: do not generate `size` indexes for a large interval. In practice, size should be equal\n  * to the number of hash functions used and is often low.\n  *\n  * @param  element  - The element to hash\n  * @param  size     - the range on which we can generate an index [0, size) = size\n  * @param  number   - The number of indexes desired\n  * @param  seed     - The seed used\n  * @return Array<number>\n  * @author Arnaud Grall\n  * @author Simon Woolf (SimonWoolf)\n  */\n  getDistinctIndexes(element, size, number, seed) {\n    if (seed === undefined) {\n      seed = (0, _utils).getDefaultSeed();\n    }\n    let n = 0;\n    const indexes = new Set();\n    let hashes = this.hashTwice(element, seed);\n    // let cycle = 0\n    while (indexes.size < number) {\n      const ind = hashes.first % size;\n      if (!indexes.has(ind)) {\n        indexes.add(ind);\n      }\n      hashes.first = (hashes.first + hashes.second) % size;\n      hashes.second = (hashes.second + n) % size;\n      n++;\n      if (n > size) {\n        // Enhanced double hashing stops cycles of length less than `size` in the case where\n        // size is coprime with the second hash. But you still get cycles of length `size`.\n        // So if we reach there and haven't finished, append a prime to the input and\n        // rehash.\n        seed++;\n        hashes = this.hashTwice(element, seed);\n      }\n    }\n    return [...indexes.values()];\n  }\n  /**\n  * Generate N indexes on range [0, size)\n  * It uses the double hashing technique to generate the indexes.\n  * It hash twice the value only once before generating the indexes.\n  * Warning: you can have a lot of modulo collisions.\n  * @param  element    - The element to hash\n  * @param  size       - The range on which we can generate the index, exclusive\n  * @param  hashCount  - The number of indexes we want\n  * @return An array of indexes on range [0, size)\n  */\n  getIndexes(element, size, hashCount, seed) {\n    if (seed === undefined) {\n      seed = (0, _utils).getDefaultSeed();\n    }\n    const arr = [];\n    const hashes = this.hashTwice(element, seed);\n    for (let i = 0; i < hashCount; i++) {\n      arr.push(this.doubleHashing(i, hashes.first, hashes.second, size));\n    }\n    return arr;\n  }\n  /**\n  * @internal\n  * Hash an element of type {@link HashableInput} into {@link Number}\n  * Can be overrided as long as you return a value of type {@link Number}\n  * Don't forget to use the seed when hashing, otherwise if some kind of randomness is in the process\n  * you may have inconsistent behaviors between 2 runs.\n  * @param element\n  * @param seed\n  * @returns A 64bits floating point {@link Number}\n  */\n  serialize(element, seed) {\n    if (!seed) {\n      seed = (0, _utils).getDefaultSeed();\n    }\n    return Number((0, _fnv1A).default(element, {\n      seed\n    }));\n  }\n  /**\n  * (64-bits only) Hash a value into two values (in hex or integer format)\n  * @param  value - The value to hash\n  * @param  asInt - (optional) If True, the values will be returned as an integer. Otherwise, as hexadecimal values.\n  * @param seed the seed used for hashing\n  * @return The results of the hash functions applied to the value (in hex or integer)\n  * @author Arnaud Grall & Thomas Minier\n  */\n  hashTwice(value, seed) {\n    if (seed === undefined) {\n      seed = (0, _utils).getDefaultSeed();\n    }\n    return {\n      first: this.serialize(value, seed + 1),\n      second: this.serialize(value, seed + 2)\n    };\n  }\n  /**\n  * Hash twice an element into their HEX string representations\n  * @param value\n  * @param seed\n  * @returns TwoHashesTemplated<string>\n  */\n  hashTwiceAsString(value, seed) {\n    const {\n      first,\n      second\n    } = this.hashTwice(value, seed);\n    return {\n      first: (0, _utils).numberToHex(first),\n      second: (0, _utils).numberToHex(second)\n    };\n  }\n  /**\n  * (64-bits only) Same as hashTwice but return Numbers and String equivalent\n  * @param  val the value to hash\n  * @param  seed the seed to change when hashing\n  * @return TwoHashesIntAndString\n  * @author Arnaud Grall\n  */\n  hashTwiceIntAndString(val, seed) {\n    if (seed === undefined) {\n      seed = (0, _utils).getDefaultSeed();\n    }\n    const one = this.hashIntAndString(val, seed + 1);\n    const two = this.hashIntAndString(val, seed + 2);\n    return {\n      int: {\n        first: one.int,\n        second: two.int\n      },\n      string: {\n        first: one.string,\n        second: two.string\n      }\n    };\n  }\n  /**\n  * Hash an item as an unsigned int\n  * @param  elem - Element to hash\n  * @param  seed - The hash seed. If its is UINT32 make sure to set the length to 32\n  * @param  length - The length of hashes (defaults to 32 bits)\n  * @return The hash value as an unsigned int\n  * @author Arnaud Grall\n  */\n  hashAsInt(elem, seed) {\n    if (seed === undefined) {\n      seed = (0, _utils).getDefaultSeed();\n    }\n    return this.serialize(elem, seed);\n  }\n  /**\n  * Hash an item and return its number and HEX string representation\n  * @param  elem - Element to hash\n  * @param  seed - The hash seed. If its is UINT32 make sure to set the length to 32\n  * @param  base - The base in which the string will be returned, default: 16\n  * @param  length - The length of hashes (defaults to 32 bits)\n  * @return The item hased as an int and a string\n  * @author Arnaud Grall\n  */\n  hashIntAndString(elem, seed) {\n    const hash = this.hashAsInt(elem, seed);\n    return {\n      int: hash,\n      string: (0, _utils).numberToHex(hash)\n    };\n  }\n}\nexports.default = Hashing;","map":{"version":3,"names":["_fnv1A","_interop_require_default","require","_utils","Hashing","doubleHashing","n","hashA","hashB","size","Math","abs","floor","getDistinctIndexes","element","number","seed","undefined","getDefaultSeed","indexes","Set","hashes","hashTwice","ind","first","has","add","second","values","getIndexes","hashCount","arr","i","push","serialize","Number","default","value","hashTwiceAsString","numberToHex","hashTwiceIntAndString","val","one","hashIntAndString","two","int","string","hashAsInt","elem","hash"],"sources":["../../../../src/shared/lib/bloom-filter/hashing.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}